# -*- coding: utf-8 -*-
"""HairDiseases.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iaXyOFBmCYFbZbYQXxwdciLn9DHMtLAv
"""

pip install keras

pip install tensorflow

from keras.layers import Input, Lambda, Dense, Flatten
from keras.models import Model
from keras.applications.vgg19 import VGG19
from keras.applications.vgg19 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt
import tensorflow as tf

IMAGE_SIZE = [224, 224]

train_path = r'C:/Users/yagna/OneDrive/Desktop/Dataset/archive/Hair Diseases - Final/train'
test_path = r'C:/Users/yagna/OneDrive/Desktop/Dataset/archive/Hair Diseases - Final/test'
val_path = r'C:/Users/yagna/OneDrive/Desktop/Dataset/archive/Hair Diseases - Final/val'

rn = VGG19(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)

for layer in rn.layers:
    layer.trainable = False

folders = glob(train_path+'\*')

x = Flatten()(rn.output)

prediction = Dense(10, activation='softmax')(x)
model = Model(inputs=rn.input, outputs=prediction)

model.summary()

train_datagen = ImageDataGenerator(rescale = 1./255)
test_datagen = ImageDataGenerator(rescale = 1./255)
val_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory(directory=train_path,
                target_size = (224,224),
                batch_size = 64,
                class_mode = 'categorical')
test_set = test_datagen.flow_from_directory(directory=test_path,
                target_size = (224,224),
                batch_size = 64,
                class_mode = 'categorical', shuffle=False)
val_set = val_datagen.flow_from_directory(directory=val_path,
                target_size = (224,224),
                batch_size = 64,
                class_mode = 'categorical', shuffle=False)

import keras
import tensorflow as tf
opt = tf.keras.optimizers.Adam(learning_rate=0.001)

model.compile(
  loss='categorical_crossentropy',
  optimizer=opt,
  metrics=["acc"]
)

import time
print(time.ctime())
from time import time
t_start = time()

import keras
import tensorflow as tf
from keras.callbacks import ModelCheckpoint, ReduceLROnPlateau

annealer = ReduceLROnPlateau(monitor='acc', factor=0.5, patience=5, verbose=1, min_lr=1e-4)
checkpoint = ModelCheckpoint('/temp/{epoch}_VGG19.h5', verbose=1, save_best_only=False, mode='auto', save_freq='epoch')

history = model.fit(
                  training_set,
                  validation_data=val_set,
                  epochs=10,
                  batch_size=128,
                  callbacks=[annealer, checkpoint],
                  steps_per_epoch=len(training_set),
                  validation_steps=len(test_set)
                )

#time.ctime()
train_time = time() - t_start
print('\nTrain time: %.3f'%(train_time/60), ' mins')



model.save("VGG19-Final.h5")
print("Model Saved as : VGG19-Final.h5")

import json
np.save('my_history.npy',history.history)
import pandas as pd

# convert the history.history dict to a pandas DataFrame:
hist_df = pd.DataFrame(history.history)

# save to json:
hist_json_file = 'history.json'
with open(hist_json_file, mode='w') as f:
    hist_df.to_json(f)

# or save to csv:
hist_csv_file = 'history.csv'
with open(hist_csv_file, mode='w') as f:
    hist_df.to_csv(f)

from time import time
start = time()
evl = model.evaluate(test_set)
test_time = time() - start

test_loss, test_acc = evl[0]*100, evl[1]*100

msg = f'Test Accuracy = {test_acc:5.2f} %'
msg1 = f'Test Loss = {test_loss:5.2f} %'
msg2 = f'Test Time = {test_time:5.2f} s'
print(msg)
print(msg1)
print(msg2)

# Plotting Loss & Accuracy Graphs
from sklearn.metrics import confusion_matrix
plt.figure(figsize=(12, 12))
plt.subplot(3, 2, 1)
plt.plot(history.history['acc'], label = 'train_accuracy')
plt.plot(history.history['val_acc'], label = 'val_accuracy')
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend()
plt.subplot(3, 2, 2)
plt.plot(history.history['loss'], label = 'train_loss')
plt.plot(history.history['val_loss'], label = 'val_loss')
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend()
plt.show()

import numpy as np

def plot_confusion_matrix(cm,
                          target_names,
                          title='Confusion matrix',
                          cmap=None,
                          normalize=True):
    import matplotlib.pyplot as plt
    import numpy as np
    import itertools

    accuracy = np.trace(cm) / float(np.sum(cm))
    misclass = 1 - accuracy

    if cmap is None:
        cmap = plt.get_cmap('Blues')

    plt.figure(figsize=(15, 15))
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()

    if target_names is not None:
        tick_marks = np.arange(len(target_names))
        plt.xticks(tick_marks, target_names, rotation=45)
        plt.yticks(tick_marks, target_names)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]


    thresh = cm.max() / 1.5 if normalize else cm.max() / 2
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        if normalize:
            plt.text(j, i, "{:0.4f}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")
        else:
            plt.text(j, i, "{:,}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")


    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))
    plt.show()

from sklearn.metrics import confusion_matrix

classes = ['Alopecia Areata', 'Contact Dermatitis', 'Folliculitis', 'Head Lice', 'Lichen Planus', 'Male Pattern Baldness', 'Psoriasis', 'Seborrheic Dermatitis', 'Telogen Effluvium', 'Tinea Capitis']

y_true = np.array(test_set.labels)
print("True : ", y_true)

y_pred = model.predict(test_set)
y_pred = np.argmax(y_pred, axis=1)
print("Predicted : ", y_pred)

conf_mat = confusion_matrix(y_true, y_pred)

plot_confusion_matrix(cm           = conf_mat,
                      normalize    = False,
                      target_names = classes,
                      title        = "VGG19 Confusion Matrix")

from PIL import Image

def prediction(img):
    jpgfile=Image.open(img)
    display(jpgfile)
    jpgfile = jpgfile.resize((224, 224))
    img_as_matrix = np.array(jpgfile)
    img_as_matrix = img_as_matrix.reshape(1,224,224,3)
    value = model.predict(img_as_matrix)
    x=np.argmax(value, axis=1)
    return classes[x[0]]

prediction("C:/Users/yagna/Desktop/Dataset/archive/Hair Diseases - Final/test/Male Pattern Baldness/male_pattern_baldness_0037.jpg")

prediction("C:/Users/yagna/Desktop/Dataset/archive/Hair Diseases - Final/test/Telogen Effluvium/telogen_effluvium_0944.jpg")

prediction("C:/Users/yagna/Desktop/Dataset/archive/Hair Diseases - Final/test/Telogen Effluvium/telogen_effluvium_0945.jpg")

prediction("C:/Users/yagna/Desktop/Dataset/archive/Hair Diseases - Final/test/Alopecia Areata/alopecia_areata_0268.jpg")

prediction("C:/Users/yagna/Desktop/Dataset/archive/Hair Diseases - Final/test/Tinea Capitis/tinea_capitis_0094.jpg")

prediction("C:/Users/yagna/Desktop/Dataset/archive/Hair Diseases - Final/test/Alopecia Areata/alopecia_areata_0723.jpg")

prediction("C:/Users/yagna/Desktop/Dataset/archive/Hair Diseases - Final/test/Contact Dermatitis/contact_dermatitis_0026.jpg")

prediction("C:/Users/yagna/Desktop/Dataset/archive/Hair Diseases - Final/test/Head Lice/head_lice_0090.jpg")

prediction("C:/Users/yagna/Desktop/Dataset/archive/Hair Diseases - Final/test/Psoriasis/psoriasis_0090.jpg")

prediction("C:/Users/yagna/Desktop/Dataset/archive/Hair Diseases - Final/test/Male Pattern Baldness/male_pattern_baldness_0134.jpg")